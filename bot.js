const fs = require('fs');
const Discord = require('discord.js');
const client = new Discord.Client();
const express = require('express')
const app = express();
//const moment = require('moment');
require('moment-duration-format');
const { timeZone } = require('moment-timezone');
const moment = require('moment-timezone');
client.login(process.env.token);

console.log(`===================================================`);
console.log(`Bot baÅŸlatÄ±ldÄ±.`);


/*const port = 3000;
app.get('/', (req, res) => {
  res.send('Hello World!')
})
app.listen(port, () => {
  //console.log(`Example app listening at https://nodejs.lickyonlinee.repl.co:${port}`)
})*/




const prefix = "!";
const afkChannelId = '1189322952894844999'; // AFK kanalÄ±nÄ±n ID'si
const notificationChannelId = '1191405644847255613'; // Bildirim gÃ¶nderilecek kanalÄ±n ID'si

client.on('message', (message) => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).split(' ');
  const command = args.shift().toLowerCase();

  if (command === 'afk') {
    const reason = args.join(' ');

    // Check if the user is in a voice channel
    if (message.member.voice.channel) {
      // Move the user to the AFK channel
      message.member.voice.setChannel(afkChannelId);

      // Update user's nickname with reason
      const nickname = `${message.member.displayName} [${reason}]`;
      message.member.setNickname(nickname).catch(console.error);

      // Find the notification channel
      const notificationChannel = client.channels.cache.get(notificationChannelId);

      // Check if the notification channel is found and is a text channel
      if (notificationChannel && notificationChannel.type === 'text') {
        // Reply with a confirmation message to the notification channel
        notificationChannel.send(`AFK oldu: ${message.member.displayName} - ${reason}`);
      }
    } else {
      message.reply('Bu komutu kullanabilmek iÃ§in ses kanalÄ±nda olmalÄ±sÄ±nÄ±z.');
    }
  }
});

client.on('voiceStateUpdate', (oldState, newState) => {
  // Check if the user is moving from the AFK channel
  if (oldState.channel && oldState.channel.id === afkChannelId) {
    // Reset user's nickname to the original nickname
    const originalNickname = oldState.member.displayName.replace(/\s\[[^\]]*\]/, '');
    oldState.member.setNickname(originalNickname).catch(console.error);
  }
});


const allowedChannelIds = ['1166886474122285056', '1159592180004966533'];

client.on('message', message => {
  // Botun kendi mesajlarÄ±nÄ± yok saymasÄ±
  if (message.author.bot) return;

  // Kanal kontrolÃ¼
  if (allowedChannelIds.includes(message.channel.id) && message.content && !message.attachments.size) {
    // YazÄ± mesajÄ±nÄ± sil
    message.delete()
      .then(() => {
        // UyarÄ± mesajÄ±nÄ± gÃ¶nder
        message.channel.send('Sadece fotoÄŸraf atabilirsiniz!')
          .then(warningMessage => {
            // UyarÄ± mesajÄ±nÄ± 1 dakika sonra sil
            setTimeout(() => {
              warningMessage.delete();
            }, 60000);
          });
      })
      .catch(console.error);
  }
});



const channelIdWithLinks = '1160577093269213234'; // Sadece link atÄ±lmasÄ±na izin vermek istediÄŸiniz kanal ID'si

let lastMessageTime = {}; // KullanÄ±cÄ±nÄ±n son mesaj zamanÄ±nÄ± takip etmek iÃ§in bir nesne

client.on('message', message => {
  // Botun kendi mesajlarÄ±nÄ± yok saymasÄ±
  if (message.author.bot) return;

  // Belirli kanal kontrolÃ¼
  if (message.channel.id === channelIdWithLinks) {
    const currentTime = Date.now();
    const authorId = message.author.id;

    // KullanÄ±cÄ±nÄ±n son mesaj zamanÄ±nÄ± kontrol et
    if (lastMessageTime[authorId] && currentTime - lastMessageTime[authorId] < 5000) {
      // EÄŸer son mesajdan bu yana 5 saniyeden az zaman geÃ§tiyse mesajÄ± sil ve uyarÄ± gÃ¶nderme
      message.delete()
        .then(() => {
          // HÄ±zlÄ± mesajlar iÃ§in uyarÄ± gÃ¶nderme
          message.channel.send('LÃ¼tfen biraz yavaÅŸlayÄ±n! Bu kanala sadece link atabilirsiniz.')
            .then(warningMessage => {
              // UyarÄ± mesajÄ±nÄ± 5 saniye sonra sil
              setTimeout(() => {
                warningMessage.delete();
              }, 5000);
            });
        })
        .catch(console.error);
    } else {
      // EÄŸer 5 saniyeden fazla zaman geÃ§tiyse mesajÄ± kabul et ve son mesaj zamanÄ±nÄ± gÃ¼ncelle
      lastMessageTime[authorId] = currentTime;

      // Mesaj iÃ§eriÄŸinde sadece link varsa silme iÅŸlemi yapÄ±lmaz
      if (!isLink(message.content)) {
        // Sadece link iÃ§ermeyen mesajlarÄ± sil
        message.delete()
          .then(() => {
            // UyarÄ± mesajÄ±nÄ± gÃ¶nder
            message.channel.send('Bu kanala sadece link atabilirsiniz!')
              .then(warningMessage => {
                // UyarÄ± mesajÄ±nÄ± 5 saniye sonra sil
                setTimeout(() => {
                  warningMessage.delete();
                }, 5000);
              });
          })
          .catch(console.error);
      }
    }
  }
});

// YardÄ±mcÄ± fonksiyon: Mesaj iÃ§eriÄŸinde link kontrolÃ¼ yapar
function isLink(content) {
  // Link kontrolÃ¼ iÃ§in bir regex kullanabilirsiniz, Ã¶rneÄŸin:
  const linkRegex = /(http(s)?:\/\/[^\s]+)/g;
  return linkRegex.test(content);
}



client.on('message', message => {
  if (!message.content.startsWith(process.env.prefix) || message.author.bot) return;

  const args = message.content.slice(process.env.prefix.length).trim().split(/ +/);
  const commandName = args.shift().toLowerCase();

  if (!client.commands.has(commandName)) return;

  const command = client.commands.get(commandName);

  try {
    command.execute(message, args);
  } catch (error) {
    console.error(error);
    message.reply('Komut yÃ¼rÃ¼tÃ¼lÃ¼rken bir hata oluÅŸtu.');
  }
})





client.on('message', message => {
  if (message.author.bot) return;

  const content = message.content.toLowerCase();

  if (content.includes('gÃ¼naydÄ±n') || content.includes('gunaydÄ±n')) {
    const responses = [
      'GÃ¼naydÄ±n! Harika bir gÃ¼n geÃ§irmenizi dilerim.',
      'GunaydÄ±n, umarÄ±m gÃ¼nÃ¼nÃ¼z gÃ¼zel geÃ§er!',
      'GÃ¼naydÄ±n! BugÃ¼n size ÅŸans getirecek bir gÃ¼n olmasÄ±nÄ± diliyorum.',
      'GunaydÄ±n! Sizi gÃ¼lÃ¼msetecek bir gÃ¼n olsun.',
      'GÃ¼naydÄ±n! BugÃ¼n kendinizi iyi hissetmenizi saÄŸlayacak gÃ¼zel ÅŸeyler yaÅŸayÄ±n.',
      'Merhaba! Size pozitif enerji dolu bir gÃ¼n diliyorum.',
      'GÃ¼naydÄ±n! Yeni gÃ¼ne enerjik bir baÅŸlangÄ±Ã§ yapÄ±n!',
      'Merhaba! BugÃ¼n size keyifli anÄ±lar getirsin.',
      'GÃ¼naydÄ±n! Hayallerinizin peÅŸinden koÅŸacaÄŸÄ±nÄ±z bir gÃ¼n olsun.',
      'Merhaba! BugÃ¼n sizi mutlu edecek gÃ¼zel sÃ¼rprizlerle dolu olsun.'
    ];

    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    message.reply(randomResponse);
  }
});


client.on('message', message => {
  if (message.author.bot) return;

  const content = message.content.toLowerCase();

  if (
    content.toLowerCase() === 'selamun aleykum' ||
    content.toLowerCase() === 'selamÃ¼n aleykÃ¼m' ||
    content.toLowerCase() === 'sa' ||
    content.toLowerCase() === 'hello' ||
    content.toLowerCase() === 'sa' ||
    content.toLowerCase() === 'sea' ||
    content.toLowerCase() === 'merhaba' ||
    content.toLowerCase() === 'hi'
  ) {
    const responses = [
      'AleykÃ¼m selam!',
      'Ve aleykÃ¼m selam!',
      'AleykÃ¼m selam! NasÄ±l yardÄ±mcÄ± olabilirim?',
      'AleykÃ¼m selam! paÅŸam',
      'AleykÃ¼m selam mÃ¼barek!'
    ];
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    message.reply(randomResponse);
  }
});



const serverId = '1136054174279290920';
const updateIntervalMinutes = 5; // GÃ¼ncelleme aralÄ±ÄŸÄ± (dakika cinsinden)
client.on('ready', () => {

  setInterval(updateServerStatus, updateIntervalMinutes * 60 * 1000); // Belirtilen dakika cinsine Ã§evrildi
  updateServerStatus();
});


async function updateServerStatus() {
  const guild = client.guilds.cache.get(serverId);
  if (!guild) return console.log('Sunucu bulunamadÄ±.');

  const totalMembers = guild.members.cache.filter(member => !member.user.bot).size;
  const onlineMembers = guild.members.cache.filter(member => !member.user.bot && member.presence.status !== 'offline').size;
  const maleMembers = guild.roles.cache.get('1159591610485575740').members.filter(member => !member.user.bot).size;
  const femaleMembers = guild.roles.cache.get('1159618289702555738').members.filter(member => !member.user.bot).size;
  const botCount = guild.members.cache.filter(member => member.user.bot).size;

  const channelsInfo = [{
    channelId: '1160541136264384602',
    data: 'ğŸ‘¥ Toplam Ãœye: ' + totalMembers
  },
  {
    channelId: '1160541148364939324',
    data: 'ğŸŸ¢ Ã‡evrimiÃ§i: ' + onlineMembers
  },
  {
    channelId: '1160541161207894037',
    data: 'ğŸ‘¨ Erkek Ãœye: ' + maleMembers
  },
  {
    channelId: '1160541175246246039',
    data: 'ğŸ‘© KÄ±z Ãœye: ' + femaleMembers
  },
  {
    channelId: '1166484214917648394',
    data: 'ğŸ¤– Bot Ãœye: ' + botCount
  },
  {
    channelId: '1160628571082072096',
    data: 'ğŸ’» Bot Ping: ' + client.ws.ping
  }
  ];

  for (const channelInfo of channelsInfo) {
    const channel = guild.channels.cache.get(channelInfo.channelId);
    if (channel && channel.type === 'voice') {
      try {
        await channel.setName(channelInfo.data);
        //console.log(`==================================`);
        //console.log(`Kanal ismi baÅŸarÄ±yla deÄŸiÅŸtirildi: ${channel.name}`);
        //console.log(`==================================`);
        
      } catch (error) {
        console.error(`Kanal ismi deÄŸiÅŸtirilirken hata oluÅŸtu (${channel.name}):`, error);
      }
    } else {
      console.error(`Kanal bulunamadÄ±: ${channelInfo.channelId}`);
    }
  }
}


client.on('error', console.error); // Discord.js'den gelen hatalarÄ± konsola yazdÄ±rÄ±r


const trackedUserId = '463821661029007363';
const ownerUserId = '1060760874312290314';
const statusFilePath = 'onlinestatus.json';

let offlineNotificationSent = false; // Ã‡evrimdÄ±ÅŸÄ± olduÄŸu bildirimi gÃ¶nderildi mi?

client.on('presenceUpdate', (oldPresence, newPresence) => {
  const user = client.users.cache.get(trackedUserId);

  if (user && newPresence.userID === trackedUserId) {
    const options = {
      timeZone: 'Europe/Istanbul',
      year: 'numeric',
      month: 'numeric',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
    };

    const currentDate = new Date().toLocaleString('tr-TR', options);

    const sendNotification = (status) => {
      const message = `@${user.username} - ${user.tag} kiÅŸisi ${status}. (${currentDate})`;
      const owner = client.users.cache.get(ownerUserId);
      owner.send(message);
    };

    fs.readFile(statusFilePath, 'utf8', (err, data) => {
      if (err) {
        console.error('Error reading onlinestatus.json:', err);
        return;
      }

      const onlineStatus = parseInt(data) || 0;

      if (user.presence) {
        if (newPresence.status === 'online' || newPresence.status === 'idle' || newPresence.status === 'dnd') {
          if (onlineStatus !== 1) {
            fs.writeFile(statusFilePath, '1', 'utf8', (err) => {
              if (err) {
                console.error('Error writing onlinestatus.json:', err);
                return;
              }
              offlineNotificationSent = false;
              sendNotification('Ã§evrimiÃ§i oldu');
            });
          }
        } else if (newPresence.status === 'offline') {
          if (onlineStatus !== 2) {
            fs.writeFile(statusFilePath, '2', 'utf8', (err) => {
              if (err) {
                console.error('Error writing onlinestatus.json:', err);
                return;
              }
              offlineNotificationSent = true;
              sendNotification('Ã§evrimdÄ±ÅŸÄ± oldu');
            });
          }
        }
      }
    });
  }
});

// Her 10 saniyede bir onlinestatus.json dosyasÄ±nÄ± kontrol et ve gÃ¼ncelle
setInterval(() => {
  const user = client.users.cache.get(trackedUserId);

  if (user && user.presence) {
    fs.readFile(statusFilePath, 'utf8', (err, data) => {
      if (err) {
        console.error('Error reading onlinestatus.json:', err);
        return;
      }

      const onlineStatus = parseInt(data) || 0;
      const newPresence = user.presence;

      if (newPresence.status === 'online' || newPresence.status === 'idle' || newPresence.status === 'dnd') {
        if (onlineStatus !== 1) {
          fs.writeFile(statusFilePath, '1', 'utf8', (err) => {
            if (err) {
              console.error('Error writing onlinestatus.json:', err);
              return;
            }
            console.log('KullanÄ±cÄ± Ã§evrimiÃ§i.');
          });
        }
      } else if (newPresence.status === 'offline') {
        if (onlineStatus !== 2) {
          fs.writeFile(statusFilePath, '2', 'utf8', (err) => {
            if (err) {
              console.error('Error writing onlinestatus.json:', err);
              return;
            }
            console.log('KullanÄ±cÄ± Ã§evrimdÄ±ÅŸÄ±.');
          });
        }
      }
    });
  }
}, 5000); // 10 saniyede bir kontrol et



client.commands = new Discord.Collection();

const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

console.log('Komutlar yÃ¼kleniyor...');

for (const file of commandFiles) {
  try {
    const command = require(`./commands/${file}`);
    client.commands.set(command.name, command);
    console.log(`[==="${command.name}" komutu yÃ¼klendi.===]`);
    
  } catch (error) {
    console.error(`"${file}" dosyasÄ± yÃ¼klenirken hata oluÅŸtu: ${error.message}`);
  }
}

// KomutlarÄ± alfabetik sÄ±rala (A'dan Z'ye)
client.commands = new Discord.Collection(
  [...client.commands.entries()].sort((a, z) => a[0].localeCompare(z[0]))
);

console.log('Komutlar yÃ¼klendi.');

console.log(`================================================================`);


client.on('message', async (message) => {
    if (message.content === '!ping') {
        message.reply('HesaplanÄ±yor, lÃ¼tfen bekleyin...').then(async (sentMessage) => {
            const botPing = await calculatePing(sentMessage.createdTimestamp);
            const discordApiPing = client.ws.ping;
            const databaseResponseTime = await calculatePingFromDatabase(); // Bu fonksiyonu kendi veritabanÄ± ping iÅŸleminize uygun ÅŸekilde doldurun
            const otherPing = await calculateOtherPing(); // DiÄŸer ping deÄŸerlerini uygun ÅŸekilde hesaplayÄ±n

            const embed = new Discord.MessageEmbed()
                .setColor('#0099ff')
                .setTitle('Ping DeÄŸerleri')
                .setDescription('Ä°ÅŸte anlÄ±k ping deÄŸerleri:')
                .addField('Bot gecikmesi', `${botPing}ms`, true)
                .addField('Discord API gecikmesi', `${discordApiPing}ms (Shard ${client.ws.shards.get(0).id})`, true)
                .addField('VeritabanÄ± yanÄ±t sÃ¼resi', `${databaseResponseTime}ms`, true)
                .addField('DiÄŸer ping', `${otherPing}ms`, true);

            sentMessage.edit(embed);
        });
    }
});

function calculatePing(sentTimestamp) {
    return new Promise(resolve => {
        const currentTime = Date.now();
        resolve(currentTime - sentTimestamp);
    });
}

function calculatePingFromDatabase() {
    // VeritabanÄ± ping hesaplama kodunu burada gerÃ§ekleÅŸtirin ve sonucu dÃ¶ndÃ¼rÃ¼n
    return new Promise(resolve => {
        // Ã–rnek olarak 50ms'lik bir deÄŸeri dÃ¶ndÃ¼rdÃ¼k
        resolve(50);
    });
}

function calculateOtherPing() {
    // DiÄŸer ping hesaplama kodunu burada gerÃ§ekleÅŸtirin ve sonucu dÃ¶ndÃ¼rÃ¼n
    return new Promise(resolve => {
        // Ã–rnek olarak 30ms'lik bir deÄŸeri dÃ¶ndÃ¼rdÃ¼k
        resolve(30);
    });
}



const BOT_OWNER_ID = '1060760874312290314'; // Bot sahibinin kullanÄ±cÄ± ID'si



client.on('message', async (message) => {
  // EÄŸer mesaj bir DM mesajÄ± ise ve botun sahibi veya botun kendisi tarafÄ±ndan gÃ¶nderilmemiÅŸse
  if (message.channel.type === 'dm' && message.author.id !== client.user.id && message.author.id !== BOT_OWNER_ID) {
    const embed = new Discord.MessageEmbed()
      .setColor('#0099ff')
      .setTitle('Yeni DM MesajÄ±')
      .setDescription(message.content)
      .setAuthor(`GÃ¶nderen: ${message.author.username}#${message.author.discriminator}`, message.author.avatarURL())
      .setURL(`https://discordapp.com/users/${message.author.id}`)
      .setTimestamp();

    // Belirtilen kullanÄ±cÄ±ya embedli mesajÄ± gÃ¶nder
    const owner = await client.users.fetch(BOT_OWNER_ID);
    owner.send(embed)
      .then(() => {
        console.log('DM mesajÄ± baÅŸarÄ±yla gÃ¶nderildi.');
      })
      .catch((error) => {
        console.error(`DM mesajÄ± gÃ¶nderirken hata oluÅŸtu: ${error}`);
      });
  }
});


const sunucuID = '1188953978864681051'; // Sunucu ID'si
const hedefSesKanalID = '1189322952894844999'; // Hedef ses kanalÄ± ID'si
const bilgiKanalID = '1191444163573600316'; // Bilgi mesajlarÄ±nÄ±n gÃ¶nderileceÄŸi kanal ID'si
const afkKanalID = '1189322952894844999'; // AFK kanalÄ± ID'si
const timerSure = 120000; // Timer sÃ¼resi (milisaniye cinsinden), Ã¶rneÄŸin 120000 = 2 dakika

const afkMesajGonderildi = {}; // Her kullanÄ±cÄ± iÃ§in bir kere gÃ¶nderildi kontrolÃ¼

client.on('ready', () => {
   

    // Bot yeniden baÅŸladÄ±ÄŸÄ±nda sesi kapalÄ± olan kullanÄ±cÄ±larÄ± kontrol et
    const sunucu = client.guilds.cache.get(sunucuID);
    const kapaliMikrofonKullanicilar = [];

    sunucu.members.cache.forEach((kullanici) => {
        if (kullanici.voice && kullanici.voice.mute && !kullanici.user.bot) {
            // EÄŸer kiÅŸi AFK kanalÄ±nda deÄŸilse (1189322952894844999), kontrolÃ¼ yap
            if (kullanici.voice.channel.id !== afkKanalID) {
                kapaliMikrofonKullanicilar.push(kullanici.user.tag);
                startTimerForUser(kullanici);
            }
        }
    });

    if (kapaliMikrofonKullanicilar.length === 0) {
        console.log("MÃ¼kemmel, herkes aktif!");
    } else {
        console.log("Mikrofonu kapalÄ± olan kullanÄ±cÄ±lar:");
        console.log(kapaliMikrofonKullanicilar.join('\n'));
        console.log("Timer baÅŸladÄ±.");
    }
});

client.on('voiceStateUpdate', (eskiDurum, yeniDurum) => {
    const sunucu = client.guilds.cache.get(sunucuID);

    if (yeniDurum.guild.id === sunucuID && !yeniDurum.member.user.bot) {
        const hedefSesKanal = sunucu.channels.cache.get(hedefSesKanalID);
        const bilgiKanal = sunucu.channels.cache.get(bilgiKanalID);
        const afkKanal = sunucu.channels.cache.get(afkKanalID);

        if (yeniDurum.channel && yeniDurum.channel.id !== afkKanalID) {
            const kullanici = sunucu.members.cache.get(yeniDurum.id);

            // EÄŸer kiÅŸi AFK kanalÄ±ndaysa, kontrolÃ¼ geÃ§ ve iÅŸlem yapma
            if (yeniDurum.channel.id === afkKanalID) {
                return;
            }

            if (kullanici.voice.mute) {
                console.log(`${kullanici.user.tag} kiÅŸisi mikrofonunu kapattÄ± ve timer baÅŸladÄ±.`);
                startTimerForUser(kullanici);
            } else {
                afkMesajGonderildi[kullanici.id] = false;
            }
        }
    }
});




function startTimerForUser(kullanici) {
    setTimeout(() => {
        if (kullanici.voice && kullanici.voice.mute) {
            const hedefSesKanal = kullanici.guild.channels.cache.get(hedefSesKanalID);
            kullanici.voice.setChannel(hedefSesKanal);

            if (!afkMesajGonderildi[kullanici.id]) {
                // KullanÄ±cÄ±ya Ã¶zel mesaj atma
                kullanici.send(`AFK olduÄŸunuz iÃ§in ${hedefSesKanal.name} kanalÄ±na taÅŸÄ±ndÄ±nÄ±z.`);

                // Bilgi kanalÄ±na mesaj gÃ¶nderme
                const bilgiKanal = kullanici.guild.channels.cache.get(bilgiKanalID);
                bilgiKanal.send(`${kullanici.user.tag} kiÅŸisi mikrofonunu 2 dakika boyunca kapattÄ±ÄŸÄ± iÃ§in otomatik olarak AFK durumuna geÃ§ti ve ${hedefSesKanal.name} kanalÄ±na taÅŸÄ±ndÄ±.`);

                afkMesajGonderildi[kullanici.id] = true;
            }
        }
    }, timerSure);
}



const channelId1231 = '1188953978864681057'; // Ses kanalÄ±nÄ±n ID'si
let connection;

client.on('ready', () => {
    console.log('Bot baÅŸladÄ±!');
    joinVoiceChannel(); // Bot baÅŸladÄ±ÄŸÄ±nda ses kanalÄ±na katÄ±l
});

client.on('voiceStateUpdate', (oldState, newState) => {
    const newUserChannel = newState.channel;
    const oldUserChannel = oldState.channel;

    // EÄŸer ses kanalÄ±nda deÄŸiÅŸiklik varsa
    if (newUserChannel !== oldUserChannel) {
        // EÄŸer yeni kanal varsa ve botun olduÄŸu kanal ise
        if (newUserChannel && newUserChannel.id === channelId1231) {
            console.log('Bot zaten ses kanalÄ±nda.');
            return; // Kanal zaten doÄŸru kanalda, hiÃ§bir iÅŸlem yapma
        }

        // DiÄŸer durumlarda, yeni bir kanala katÄ±lan kullanÄ±cÄ± varsa veya bir kullanÄ±cÄ± kanaldan ayrÄ±lÄ±yorsa
        if (newUserChannel) {
            console.log(`${newState.member.displayName} kanala katÄ±ldÄ±.`);
        } else if (oldUserChannel) {
            console.log(`${oldState.member.displayName} kanaldan ayrÄ±ldÄ±.`);
        }

        // Tekrar ses kanalÄ±na katÄ±lma iÅŸlemini gerÃ§ekleÅŸtir
        joinVoiceChannel();
    }
});

function joinVoiceChannel() {
    const channel = client.channels.cache.get(channelId1231);

    if (channel && channel.type === 'voice') {
        channel.join()
            .then(newConnection => {
                connection = newConnection;
              connection.voice.setSelfDeaf(true);
              connection.voice.setSelfMute(true);
                console.log(`Joined ${channel.name}`);
                console.log('Bot ses kanalÄ±nda');

                // Mikrofonu ve hoparlÃ¶rÃ¼ kapalÄ± tut
                connection.voice.setSelfDeaf(true);
                connection.voice.setSelfMute(true);
            })
            .catch(error => {
              //  console.error('Ses kanalÄ±na baÄŸlanÄ±rken bir hata oluÅŸtu:', error);
            });
    } else {
        console.error(`Channel with ID ${channelId1231} not found or not a voice channel.`);
    }
}
